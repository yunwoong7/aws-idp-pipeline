import * as cdk from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as lambda from 'aws-cdk-lib/aws-lambda';
// import * as ssm from 'aws-cdk-lib/aws-ssm';
import * as oss from 'aws-cdk-lib/aws-opensearchservice';
import { Construct } from 'constructs';
import { Opensearch } from '../constructs/opensearch.js';
import { NagSuppressions } from 'cdk-nag';
import * as path from 'path';
import { fileURLToPath } from 'url';

interface OpensearchStackProps extends cdk.StackProps {
  vpc: ec2.IVpc;
  domainName?: string;
  indexName?: string;
  instanceType?: string;
  instanceCount?: number;
  dedicatedMasterEnabled?: boolean;
}

const __dirname = path.dirname(fileURLToPath(import.meta.url));

/**
 * AWS IDP AI Analysis - OpenSearch Stack
 *
 * OpenSearch domain deployment dedicated stack:
 * - Deploy OpenSearch cluster
 * - Vector embedding storage
 * - Security configuration within VPC
 * - Provides Lambda Layer
 */
export class OpensearchStack extends cdk.Stack {
  readonly os: Opensearch;
  readonly domain: oss.IDomain; // OpenSearch domain accessor
  readonly domainEndpoint: string; // Domain endpoint accessor
  readonly openSearchLayer: lambda.LayerVersion; // OpenSearch layer for sharing

  constructor(scope: Construct, id: string, props: OpensearchStackProps) {
    super(scope, id, props);

    // 1. Create Opensearch domain
    const isProd = (this.node.tryGetContext('isProd') as boolean) || false;
    this.os = new Opensearch(this, 'Opensearch', {
      vpc: props.vpc,
      isProd: isProd,
    });

    // Initialize domain accessors
    this.domain = this.os.domain;
    this.domainEndpoint = this.os.domain.domainEndpoint;

    // 2. Create OpenSearch Lambda Layer (shared across services)
    this.openSearchLayer = new lambda.LayerVersion(this, 'OpenSearchLayer', {
      code: lambda.Code.fromAsset(
        path.join(__dirname, '../lambda_layer/custom_layer_opensearch.zip'),
      ),
      compatibleRuntimes: [lambda.Runtime.PYTHON_3_13],
      description: 'OpenSearch and related dependencies for Lambda functions',
    });


    // 4. Create Outputs (without exports to avoid dependency issues)
    new cdk.CfnOutput(this, 'OpenSearchDomainEndpoint', {
      value: this.os.domain.domainEndpoint,
      description: 'OpenSearch Domain Endpoint',
    });

    new cdk.CfnOutput(this, 'OpenSearchLayerArn', {
      value: this.openSearchLayer.layerVersionArn,
      description: 'OpenSearch Lambda Layer ARN',
    });

    // CDK Nag suppression settings
    this.addNagSuppressions();
  }

  /**
   * CDK Nag suppression settings
   */
  private addNagSuppressions(): void {
    // Stack-level suppressions for CDK auto-generated resources
    NagSuppressions.addStackSuppressions(this, [
      {
        id: 'AwsSolutions-IAM4',
        reason: [
          'CDK auto-generated resources use AWS managed policies for basic Lambda execution.',
          'AWSLambdaBasicExecutionRole is required for CloudFormation custom resource operations.',
          'This is not user-configurable and cannot be replaced with custom policies.',
        ].join(' '),
        appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'],
      },
      {
        id: 'AwsSolutions-IAM5',
        reason: [
          'Wildcard permissions are required for CDK custom resource log group policy operations.',
          'OpenSearch domain setup requires broad permissions for CloudWatch logs configuration.',
          'This is generated by CDK and cannot be made more restrictive.',
        ].join(' '),
        appliesTo: ['Resource::*'],
      },
      {
        id: 'AwsSolutions-OS3',
        reason: [
          'OpenSearch domain access is restricted using VPC security groups instead of IP allowlists.',
          'VPC-based access control provides equivalent security within private network architecture.',
          'Lambda functions access OpenSearch through VPC endpoints only.',
        ].join(' '),
      },
      {
        id: 'AwsSolutions-EC23',
        reason: [
          'Security groups reference VPC CIDR blocks using CDK intrinsic functions.',
          'VPC CIDR is dynamically resolved and provides secure network-level access control.',
          'This pattern is secure but uses intrinsic functions that cdk-nag cannot statically validate.',
        ].join(' '),
      },
      {
        id: 'CdkNagValidationFailure',
        reason: [
          'CDK-nag cannot evaluate intrinsic functions like Fn::GetAtt for VPC CIDR resolution.',
          'The configuration is valid and secure but uses dynamic CloudFormation references.',
          'This is a limitation of static analysis tools with dynamic infrastructure.',
        ].join(' '),
      },
    ]);
  }

}
